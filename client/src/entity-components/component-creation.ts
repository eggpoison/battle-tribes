import { ServerComponentType } from "../../../shared/src/components";
import { EntityID } from "../../../shared/src/entities";
import { PacketReader } from "../../../shared/src/packets";
import AIHelperComponent from "./server-components/AIHelperComponent";
import AmmoBoxComponent from "./server-components/AmmoBoxComponent";
import ProjectileComponent from "./server-components/ArrowComponent";
import BattleaxeProjectileComponent from "./server-components/BattleaxeProjectileComponent";
import BerryBushComponent from "./server-components/BerryBushComponent";
import BlueprintComponent from "./server-components/BlueprintComponent";
import BoulderComponent from "./server-components/BoulderComponent";
import { BracingsComponent } from "./server-components/BracingsComponent";
import BuildingMaterialComponent from "./server-components/BuildingMaterialComponent";
import CactusComponent from "./server-components/CactusComponent";
import CookingComponent from "./server-components/CookingComponent";
import CowComponent from "./server-components/CowComponent";
import CraftingStationComponent from "./server-components/CraftingStationComponent";
import DamageBoxComponent from "./server-components/DamageBoxComponent";
import DecorationComponent from "./server-components/DecorationComponent";
import DoorComponent from "./server-components/DoorComponent";
import EscapeAIComponent from "./server-components/EscapeAIComponent";
import FenceComponent from "./server-components/FenceComponent";
import FenceGateComponent from "./server-components/FenceGateComponent";
import FishComponent from "./server-components/FishComponent";
import FollowAIComponent from "./server-components/FollowAIComponent";
import FrozenYetiComponent from "./server-components/FrozenYetiComponent";
import GolemComponent from "./server-components/GolemComponent";
import GuardianComponent from "./server-components/GuardianComponent";
import { GuardianGemFragmentProjectileComponent } from "./server-components/GuardianGemFragmentProjectileComponent";
import { GuardianGemQuakeComponent } from "./server-components/GuardianGemQuakeComponent";
import { GuardianSpikyBallComponent } from "./server-components/GuardianSpikyBallComponent";
import HealingTotemComponent from "./server-components/HealingTotemComponent";
import HealthComponent from "./server-components/HealthComponent";
import HutComponent from "./server-components/HutComponent";
import IceArrowComponent from "./server-components/IceArrowComponent";
import IceShardComponent from "./server-components/IceShardComponent";
import IceSpikesComponent from "./server-components/IceSpikesComponent";
import InventoryComponent from "./server-components/InventoryComponent";
import InventoryUseComponent from "./server-components/InventoryUseComponent";
import ItemComponent from "./server-components/ItemComponent";
import KrumblidComponent from "./server-components/KrumblidComponent";
import LayeredRodComponent from "./server-components/LayeredRodComponent";
import PebblumComponent from "./server-components/PebblumComponent";
import PhysicsComponent from "./server-components/PhysicsComponent";
import PlantComponent from "./server-components/PlantComponent";
import PlanterBoxComponent from "./server-components/PlanterBoxComponent";
import PlayerComponent from "./server-components/PlayerComponent";
import PunjiSticksComponent from "./server-components/PunjiSticksComponent";
import ResearchBenchComponent from "./server-components/ResearchBenchComponent";
import RockSpikeComponent from "./server-components/RockSpikeComponent";
import SlimeComponent from "./server-components/SlimeComponent";
import SlimeSpitComponent from "./server-components/SlimeSpitComponent";
import SlimewispComponent from "./server-components/SlimewispComponent";
import SnowballComponent from "./server-components/SnowballComponent";
import SpearProjectileComponent from "./server-components/SpearProjectileComponent";
import SpikesComponent from "./server-components/SpikesComponent";
import SpitPoisonAreaComponent from "./server-components/SpitPoisonAreaComponent";
import StatusEffectComponent from "./server-components/StatusEffectComponent";
import StructureComponent from "./server-components/StructureComponent";
import ThrowingProjectileComponent from "./server-components/ThrowingProjectileComponent";
import TombstoneComponent from "./server-components/TombstoneComponent";
import TotemBannerComponent from "./server-components/TotemBannerComponent";
import { createTransformComponentFromData } from "./server-components/TransformComponent";
import TreeComponent, { createTreeComponentFromData } from "./server-components/TreeComponent";
import TribeComponent from "./server-components/TribeComponent";
import TribeMemberComponent from "./server-components/TribeMemberComponent";
import TribesmanAIComponent from "./server-components/TribesmanAIComponent";
import TribeWarriorComponent from "./server-components/TribeWarriorComponent";
import TunnelComponent from "./server-components/TunnelComponent";
import TurretComponent from "./server-components/TurretComponent";
import YetiComponent from "./server-components/YetiComponent";
import ZombieComponent from "./server-components/ZombieComponent";

export function createComponent(entity: EntityID, componentType: ServerComponentType, reader: PacketReader): object {
   switch (componentType) {
      case ServerComponentType.transform: return createTransformComponentFromData(reader);
      case ServerComponentType.cow: return new CowComponent();
      case ServerComponentType.turret: return new TurretComponent(entity);
      case ServerComponentType.tribe: return new TribeComponent();
      case ServerComponentType.inventory: return new InventoryComponent();
      case ServerComponentType.ammoBox: return new AmmoBoxComponent();
      case ServerComponentType.slime: return new SlimeComponent();
      case ServerComponentType.golem: return new GolemComponent();
      case ServerComponentType.statusEffect: return new StatusEffectComponent();
      case ServerComponentType.cactus: return new CactusComponent();
      case ServerComponentType.health: return new HealthComponent();
      case ServerComponentType.physics: return new PhysicsComponent();
      case ServerComponentType.researchBench: return new ResearchBenchComponent();
      case ServerComponentType.berryBush: return new BerryBushComponent();
      case ServerComponentType.inventoryUse: return new InventoryUseComponent();
      case ServerComponentType.zombie: return new ZombieComponent();
      case ServerComponentType.player: return new PlayerComponent();
      case ServerComponentType.item: return new ItemComponent();
      case ServerComponentType.tombstone: return new TombstoneComponent();
      case ServerComponentType.tree: return createTreeComponentFromData(reader);
      case ServerComponentType.blueprint: return new BlueprintComponent();
      case ServerComponentType.projectile: return new ProjectileComponent();
      case ServerComponentType.iceArrow: return new IceArrowComponent();
      case ServerComponentType.yeti: return new YetiComponent(entity);
      case ServerComponentType.frozenYeti: return new FrozenYetiComponent(entity);
      case ServerComponentType.totemBanner: return new TotemBannerComponent();
      case ServerComponentType.cooking: return new CookingComponent(entity);
      case ServerComponentType.hut: return new HutComponent(entity);
      case ServerComponentType.snowball: return new SnowballComponent();
      case ServerComponentType.fish: return new FishComponent();
      case ServerComponentType.rockSpike: return new RockSpikeComponent();
      case ServerComponentType.slimeSpit: return new SlimeSpitComponent();
      case ServerComponentType.door: return new DoorComponent();
      case ServerComponentType.tribesmanAI: return new TribesmanAIComponent();
      case ServerComponentType.tunnel: return new TunnelComponent();
      case ServerComponentType.buildingMaterial: return new BuildingMaterialComponent();
      case ServerComponentType.spikes: return new SpikesComponent(entity);
      case ServerComponentType.punjiSticks: return new PunjiSticksComponent();
      case ServerComponentType.tribeMember: return new TribeMemberComponent();
      case ServerComponentType.healingTotem: return new HealingTotemComponent();
      case ServerComponentType.planterBox: return new PlanterBoxComponent();
      case ServerComponentType.plant: return new PlantComponent();
      case ServerComponentType.structure: return new StructureComponent();
      case ServerComponentType.fence: return new FenceComponent(entity);
      case ServerComponentType.fenceGate: return new FenceGateComponent(entity);
      case ServerComponentType.craftingStation: return new CraftingStationComponent();
      case ServerComponentType.boulder: return new BoulderComponent();
      case ServerComponentType.aiHelper: return new AIHelperComponent();
      case ServerComponentType.escapeAI: return new EscapeAIComponent();
      case ServerComponentType.iceSpikes: return new IceSpikesComponent();
      case ServerComponentType.followAI: return new FollowAIComponent();
      case ServerComponentType.iceShard: return new IceShardComponent();
      case ServerComponentType.pebblum: return new PebblumComponent();
      case ServerComponentType.slimewisp: return new SlimewispComponent();
      case ServerComponentType.throwingProjectile: return new ThrowingProjectileComponent();
      case ServerComponentType.tribeWarrior: return new TribeWarriorComponent();
      case ServerComponentType.layeredRod: return new LayeredRodComponent();
      case ServerComponentType.decoration: return new DecorationComponent();
      case ServerComponentType.spitPoisonArea: return new SpitPoisonAreaComponent();
      case ServerComponentType.battleaxeProjectile: return new BattleaxeProjectileComponent();
      case ServerComponentType.spearProjectile: return new SpearProjectileComponent();
      case ServerComponentType.krumblid: return new KrumblidComponent();
      case ServerComponentType.damageBox: return new DamageBoxComponent();
      case ServerComponentType.guardian: return new GuardianComponent(entity);
      case ServerComponentType.guardianGemQuake: return new GuardianGemQuakeComponent();
      case ServerComponentType.guardianGemFragmentProjectile: return new GuardianGemFragmentProjectileComponent();
      case ServerComponentType.guardianSpikyBall: return new GuardianSpikyBallComponent();
      case ServerComponentType.bracings: return new BracingsComponent();
   }
}